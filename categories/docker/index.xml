<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Zero's Blog</title><link>https://blog.zerolr.net/categories/docker/</link><description>Recent content in Docker on Zero's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Oct 2022 17:57:01 +0000</lastBuildDate><atom:link href="https://blog.zerolr.net/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>【PostgreSQL】初探 Transaction Isolation</title><link>https://blog.zerolr.net/p/2022/10/22/first-try-transaction-isolation/</link><pubDate>Sat, 22 Oct 2022 17:57:01 +0000</pubDate><guid>https://blog.zerolr.net/p/2022/10/22/first-try-transaction-isolation/</guid><description>&lt;img src="https://blog.zerolr.net/assets/images/pg.jpeg" alt="Featured image of post 【PostgreSQL】初探 Transaction Isolation" />&lt;blockquote>
&lt;p>最近面試被問到有關 &lt;strong>Transaction&lt;/strong> 的問題時，幾乎答不出來Orz，趕緊查資料來壓壓驚。&lt;/p>
&lt;/blockquote>
&lt;p>這篇我會從官方文件及網路文章擷取部分內容，試著理解 &lt;a class="link" href="https://www.postgresql.org/docs/14/transaction-iso.html" target="_blank" rel="noopener"
>Postgres 中的 Transaction&lt;/a> ，用 Docker 建立 Postgres 來做實驗，試著重現其中幾種狀況，由於我個人理解程度還不夠深，建議去閱讀參考資源的文章會收穫更多喔！&lt;/p>
&lt;p>先來一段官方的介紹，詳細的內容在 &lt;a class="link" href="https://docs.postgresql.tw/the-sql-language/concurrency-control/introduction" target="_blank" rel="noopener"
>PostgreSQL MVCC 簡介&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>PostgreSQL 為開發者們提供了豐富的工具來管理資料的 &lt;strong>同時存取&lt;/strong>。資料的 &lt;strong>一致性&lt;/strong> 在資料庫內部是以 &lt;strong>多重資料版本的方式維護（Multiversion Concurrency Control，MVCC）&lt;/strong>，這表示無論目前資料的當下狀態如何，每個 SQL 指令會看見的是資料在一段時間前的 &lt;strong>快照&lt;/strong> （資料庫的某個版本）。&lt;/p>
&lt;/blockquote>
&lt;p>而MVCC這個功能大多數資料庫已經實現了，詳細參考 &lt;a class="link" href="https://zh.wikipedia.org/zh-tw/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener"
>維基百科-多版本並行控制&lt;/a> 。&lt;/p>
&lt;p>這次實驗的範圍以 &lt;strong>交易隔離(Transaction Isolation)&lt;/strong> 為主 ，以我個人根據官方手冊提供的解釋及範例來做實驗，若過程中有錯誤認知也請不吝告知！&lt;/p>
&lt;h2 id="小試身手">小試身手&lt;/h2>
&lt;p>可以先到 &lt;a class="link" href="https://www.crunchydata.com/developers/playground/transactions" target="_blank" rel="noopener"
>Crunchydata Tutorials - Transactions&lt;/a> 去試一遍 postgres 中的 transaction 行為，照著做之外也可以去試著理解教學的重點喔！&lt;/p>
&lt;h2 id="sql-transaction">SQL &lt;strong>Transaction&lt;/strong>&lt;/h2>
&lt;p>在實驗前先來複習一下 &lt;strong>資料庫交易行為(Transaction)&lt;/strong> 的特性，以下節錄自 &lt;a class="link" href="https://totoroliu.medium.com/%E8%B3%87%E6%96%99%E5%BA%AB-acid-bb87324035a8" target="_blank" rel="noopener"
>SQL 大小事 - Po-Ching **Liu&lt;/a>。**&lt;/p>
&lt;hr>
&lt;p>在資料庫中，&lt;strong>交易(事務)&lt;/strong> 意旨由各種 &lt;strong>資料庫操作(select、update、insert等)&lt;/strong> 所組成的邏輯過程。&lt;/p>
&lt;p>在資料庫中為保證其交易是正確且可靠的，必需滿足以下 &lt;strong>四個特性&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>原子性(Atomicity)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在資料庫的每一筆交易中只有兩種可能發生，第一種是全部完全(commit)，第二種是全部不完成(rollback)，不會因為某個環節出錯，而終止在那個環節，在出錯之後會恢復至交易之前的狀態，如同還沒執行此筆交易。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>一致性(Consistency)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在交易中會產生資料或者驗證狀態，然而當錯誤發生，所有已更改的資料或狀態將會恢復至交易之前。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>隔離性(Isolation)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>資料庫允許多筆交易同時進行，交易進行時未完成的交易資料並不會被其他交易使用，直到此筆交易完成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持續性(Durability)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>交易完成後對資料的修改是永久性的，資料不會因為系統重啟或錯誤而改變。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="什麼是-交易隔離transaction-isolation-">什麼是 交易隔離(Transaction Isolation) ?&lt;/h2>
&lt;p>以下節錄自 &lt;a class="link" href="https://docs.postgresql.tw/the-sql-language/concurrency-control/transaction-isolation" target="_blank" rel="noopener"
>PostgreSQL 交易隔離&lt;/a> 及 &lt;a class="link" href="https://hackmd.io/@Burgess/SkDnHKMNr" target="_blank" rel="noopener"
>資料庫 Transaction &amp;amp; Lock 筆記。&lt;/a>&lt;/p>
&lt;hr>
&lt;p>在不同等級中發生 &lt;strong>競爭條件(Race condition)&lt;/strong> 是：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Dirty write (髒寫)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>transaction 尚未 commit 的情況下，其值被另一個 transaction 給覆寫。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dirty read (髒讀)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>transaction 讀取的資料是由尚未 commit 的 concurrency transaction 寫入的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Non-repeatable read (無法重複的讀取)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>又可稱作 &lt;strong>讀取偏差(read skew)&lt;/strong> ，transaction 重新讀取它之前讀過的資料，但是卻發現資料被其他 transaction 修改（在最初讀取之後commit）了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Phantom read (幻讀)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>又可稱作 &lt;strong>寫入偏差(wirte skew)&lt;/strong> ，transaction 重新執行查詢，得到滿足搜尋條件的資料集，但卻發現得到的資料集因為其他最近剛 commit 的 transaction 而變更了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Serialization anomaly (序列化異常)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在成功提交一群 transactions 後，結果與以所有可能的順序依序執行交易的結果都不一致。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>SQL 標準中定義了&lt;strong>四個等級的交易隔離 :&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Read uncommitted :&lt;/strong>
代表 transaction 可以讀到別的 transaction &lt;strong>尚未 commit&lt;/strong> 的資料，在這個等級中 race condition 三個問題都沒有解決。&lt;/li>
&lt;li>&lt;strong>Read committed :&lt;/strong>
代表 transaction 只能讀到別的 transaction &lt;strong>已經 commit&lt;/strong> 的資料，沒有 commit 的話就不會讀到，在這個等級&lt;strong>解決了 Dirty read&lt;/strong> 的問題，為 &lt;strong>Postgres 預設等級&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>Repeatable read :&lt;/strong>
代表每次 transaction 要讀取特定欄位的資料時，只要 &lt;strong>query 條件相同&lt;/strong>，&lt;strong>讀取到的資料內容就會相同，&lt;strong>在這個等級&lt;/strong>解決了 Non-repeatable read&lt;/strong> 的問題，為 &lt;strong>MYSQL InnoDB 預設等級&lt;/strong> 。&lt;/li>
&lt;li>&lt;strong>Serializable :&lt;/strong>
代表在多個 transaction 同時執行時，只要 &lt;strong>transaction 的順序相同時，得到的結果一定相同&lt;/strong>。比如說 Transaction A 先執行了接下來再執行 Transaction B，在同樣的條件下，每次執行都會得到一樣的結果，在這個等級下連同 &lt;strong>Phantom read 也會一併被解決&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h2 id="交易隔離等級與競爭條件">交易隔離等級與競爭條件&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>隔離等級&lt;/th>
&lt;th>Dirty write&lt;/th>
&lt;th>Dirty read&lt;/th>
&lt;th>Non-repeatable read&lt;/th>
&lt;th>Phantom read&lt;/th>
&lt;th>Serialization anomaly&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Read uncommitted&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>允許，但PG中不會&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Read committed&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Repeatable read&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>允許，但PG中不會&lt;/td>
&lt;td>可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Serializable&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;td>不可能&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://ithelp.ithome.com.tw/users/20130395/ironman/4188" target="_blank" rel="noopener"
>資料工程師修煉之路 Part II&lt;/a> IThome 鐵人賽中的系列文章，有附圖而且解釋的更詳細，非常推薦去閱讀！&lt;/p>
&lt;/blockquote>
&lt;h2 id="實驗環境">實驗環境&lt;/h2>
&lt;ul>
&lt;li>Mac M1&lt;/li>
&lt;li>Docker 20.10.17&lt;/li>
&lt;li>Docker Compose 2.2.3&lt;/li>
&lt;li>Docker Image: &lt;code>postgres:14-alpine&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="模擬-race-condition-發生">模擬 race condition 發生&lt;/h2>
&lt;blockquote>
&lt;p>由於在 RDBMS 中的 transaction 不允許 &lt;strong>dirty write(髒寫)&lt;/strong> 的狀況發生，有關其狀況可以參考其他文章解釋，而 &lt;strong>serialization anomaly(序列化異常)&lt;/strong> 我還不清楚如何重現🥲，&lt;strong>dirty read(髒讀)&lt;/strong> 在 postgres 中也被限制，這邊就先試著重現一種 race condition 的狀況，並觀察修改 isolation 等級前後的結果。&lt;/p>
&lt;/blockquote>
&lt;h3 id="non---repeatable-readread-skew">Non - Repeatable Read(Read skew)&lt;/h3>
&lt;p>模擬在 &lt;strong>Read committed&lt;/strong> 等級底下會發生的問題。&lt;/p>
&lt;p>參考以下情境進行實驗：&lt;/p>
&lt;ul>
&lt;li>Alice 擁有兩個銀行帳戶，各有 500 元在帳戶中，共有 1000 元&lt;/li>
&lt;li>有個轉帳作業發起 transaction 從 Account 1 轉帳至 Account 2&lt;/li>
&lt;li>Alice 發起的 transaction 在&lt;strong>轉帳前&lt;/strong>查了 Account 1 ，在&lt;strong>轉帳後&lt;/strong>查了 Account 2，得到總額 900元的資訊，發現總金額少了 100 元，但帳戶中總額確實為 1000 元&lt;/li>
&lt;li>Alice 需要再次查詢才可取得正確的結果&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/figure_7-6.png"
loading="lazy"
alt="figure_7-6.png"
>&lt;/p>
&lt;p>這個情境下符合 Read committed 等級中允許讀取已 committed 的資料，但沒有保證在同一個 transaction 下，所取得的資料都是同一份。&lt;/p>
&lt;hr>
&lt;p>GitHub repo： &lt;a class="link" href="https://github.com/zeroLR/first-try-transaction-isolation" target="_blank" rel="noopener"
>https://github.com/zeroLR/first-try-transaction-isolation&lt;/a>&lt;/p>
&lt;p>建立資料夾&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p first-try-transaction-isolation/non-repeatable-read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> first-try-transaction-isolation/non-repeatable-read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch docker-compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>docker-compose 配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.1&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">db&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres:14-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_DB&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">working_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/usr/src&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 直接把現在資料夾內容映射至建立的container中，copy所需檔案進去比較好，這邊僅為了方便操作&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">.:/usr/src&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>啟動 container 的順序不影響映射到 container 中的檔案，這邊就先啟動&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>建立 sql 檔&lt;/p>
&lt;p>&lt;strong>initdb.sql&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">EXISTS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">SERIAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>alice.sql&lt;/strong>(註解那行表示設定此transaction的隔離等級)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>transfer.sql&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">accounts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>建立 shell script&lt;/p>
&lt;p>&lt;strong>lab.sh&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/usr/src/non-repeatable-read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 執行 initdb 中的 query 初始化實驗環境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">psql -U postgres -f &lt;span class="nv">$path&lt;/span>/initdb.sql --out log.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 將兩個執行 transaction 放到背景並發執行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">psql -U postgres -f &lt;span class="nv">$path&lt;/span>/alice.sql &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">psql -U postgres -f &lt;span class="nv">$path&lt;/span>/transfer.sql &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>start.sh&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">RED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;\033[0;31m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BLUE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;\033[0;34m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GREEN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;\033[0;32m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">NC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;\033[0m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/usr/src/non-repeatable-read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">cycle&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">300&lt;/span> &lt;span class="c1"># 執行次數&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">snapshotAfterTransaction&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="c1"># 另一筆 transaction commit 前取得的快照計數&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">snapshotBeforeTransaction&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="c1"># 另一筆 transaction commit 後取得的快照計數&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">snapshotNonRepeatable&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="c1"># 另一筆 transaction 中取到不同快照計數&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> i in &lt;span class="k">$(&lt;/span>seq &lt;span class="m">1&lt;/span> &lt;span class="nv">$cycle&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 執行 lab.sh 中的指令，並過濾出有400、500、600的結果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">output&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>sh &lt;span class="nv">$path&lt;/span>/lab.sh &lt;span class="p">|&lt;/span> grep -E &lt;span class="s1">&amp;#39;400|500|600&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 儲存各種狀況結果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">## 兩筆資料皆是另一筆 transaction commit 後的快照&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">snapshot1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$output&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;600 400&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">## 兩筆資料皆是另一筆 transaction begin 前的快照&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">snapshot2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$output&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;500 500&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">## 第一筆資料為另一筆 transaction begin 前的快照，第二筆則為 transaction commit 後的快照&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">snapshot3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$output&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;500 400&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$snapshot1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> snapshotAfterTransaction++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">GREEN&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="nv">$snapshot1&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NC&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$snapshot2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> snapshotBeforeTransaction++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BLUE&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="nv">$snapshot2&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NC&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$snapshot3&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> snapshotNonRepeatable++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">RED&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="nv">$snapshot3&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NC&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 三種狀況結果統計&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -eq &lt;span class="nv">$cycle&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">GREEN&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">AfterTransaction: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">snapshotAfterTransaction&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">\n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BLUE&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">BeforeTransaction: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">snapshotBeforeTransaction&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">\n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">RED&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">Non-repeatable: &lt;/span>&lt;span class="nv">$snapshotNonRepeatable&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NC&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>檔案準備好之後，執行 start.sh 即可開始實驗，使用 time -p 可以得知執行時間&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">time&lt;/span> -p sh start.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="實驗結果">實驗結果&lt;/h2>
&lt;h3 id="read-committed-postgres-預設等級">Read committed (postgres 預設等級)&lt;/h3>
&lt;p>使用預設隔離等級，300次實驗中有8次得到有問題的結果。&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/read-committed.png"
loading="lazy"
alt="截圖 2022-10-23 上午1.13.50.png"
>&lt;/p>
&lt;h2 id="repeatable-read">Repeatable Read&lt;/h2>
&lt;p>設定 &lt;code>SET TRANSACTION ISOLATION LEVEL REPEATABLE READ&lt;/code> 後，300次實驗中無發生不正確的結果，相對的取得另一交易後的資料次數較少。&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/repeatable-read.png"
loading="lazy"
alt="截圖 2022-10-23 上午1.14.12.png"
>&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;ul>
&lt;li>如果再將實驗次數拉高或許結果會更準確，不過我也不是很確定這個做法有沒有其他問題，只是覺得能夠重現同樣的問題並且去解決它，是一件蠻有成就的事，這次只有寫 Non-repeatable Read(read skew) 的實驗，之後有空再試試重現 Phantom Read(write skew)。&lt;/li>
&lt;/ul>
&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zh.wikipedia.org/zh-tw/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener"
>維基百科-多版本並行控制&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.crunchydata.com/developers/playground/transactions" target="_blank" rel="noopener"
>Crunchydata Tutorials - Transactions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.postgresql.org/docs/14/transaction-iso.html" target="_blank" rel="noopener"
>PostgreSQL 14 transaction-iso&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.postgresql.tw/the-sql-language/concurrency-control/introduction" target="_blank" rel="noopener"
>PostgreSQL MVCC 簡介&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.postgresql.tw/the-sql-language/concurrency-control/transaction-isolation" target="_blank" rel="noopener"
>PostgreSQL 交易隔離&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://totoroliu.medium.com/%E8%B3%87%E6%96%99%E5%BA%AB-acid-bb87324035a8" target="_blank" rel="noopener"
>SQL 大小事&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://hackmd.io/@Burgess/SkDnHKMNr" target="_blank" rel="noopener"
>資料庫 Transaction &amp;amp; Lock 筆記&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://ithelp.ithome.com.tw/users/20130395/ironman/4188" target="_blank" rel="noopener"
>資料工程師修煉之路 Part II&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>【Linux】Concurrency on sh</title><link>https://blog.zerolr.net/p/2022/10/16/concurrency-on-sh/</link><pubDate>Sun, 16 Oct 2022 19:56:56 +0000</pubDate><guid>https://blog.zerolr.net/p/2022/10/16/concurrency-on-sh/</guid><description>&lt;p>這篇紀錄在 docker busybox 中使用 shell script 同時執行多個指令，比較使用 &lt;code>&amp;amp;&lt;/code> 將命令帶到背景執行與在前景執行時的狀況，如理解有誤也歡迎糾正。&lt;/p>
&lt;p>程式碼放在 github: &lt;a class="link" href="https://github.com/zeroLR/concurrency-on-sh" target="_blank" rel="noopener"
>https://github.com/zeroLR/concurrency-on-sh&lt;/a>&lt;/p>
&lt;h2 id="實驗環境">實驗環境&lt;/h2>
&lt;ul>
&lt;li>Mac M1&lt;/li>
&lt;li>Docker 20.10.17&lt;/li>
&lt;li>Docker Compose 2.2.3&lt;/li>
&lt;li>Docker Image: &lt;code>busybox:latest&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="建立實驗環境">建立實驗環境&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>建立資料夾 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir concurrency-on-sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> concurrency-on-sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>執行以下指令產生本次實驗檔案。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt; &amp;#39;EOF&amp;#39; &amp;gt;&amp;gt; foreground.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 3 ; echo &amp;#34;First job has been completed.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 9 ; echo &amp;#34;Next job has been completed.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 6 ; echo &amp;#34;All jobs have been completed.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt; &amp;#39;EOF&amp;#39; &amp;gt;&amp;gt; background.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 3 &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo $!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 9 &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo $!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 6 &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo $!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">wait -n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo &amp;#34;First job has been completed.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">wait -n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo &amp;#34;Next job has been completed.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">wait
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo &amp;#34;All jobs have been completed.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt; &amp;#39;EOF&amp;#39; &amp;gt;&amp;gt; zombie.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">for i in `seq 1 10`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> do
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> sleep 10 &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> echo $!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">done
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">wait
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 docker 或 docker-compose 啟動 container，將實驗檔案 mount 至 container 中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># docker command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo docker run -dti --restart always --workdir /home --mount &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>bind,source&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">/&amp;#34;&lt;/span>,target&lt;span class="o">=&lt;/span>/home --name busybox busybox ash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># concurrency-on-sh/docker-compose.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">busybox&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">working_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/home&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ash&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">.:/home&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># docker-compose&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>開啟兩個 shell ，都使用 docker exec 進入 container 的 shell 中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo docker &lt;span class="nb">exec&lt;/span> -ti busybox busybox ash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>其中一個 shell 執行 top 開啟系統監視(按 1 可以顯示各個 CPU 資源)，待會實驗時方便觀察 process 的增減過程。&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-8812.29.18.png"
loading="lazy"
alt="截圖 2022-10-17 上午12.29.18.png"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="前景執行">前景執行&lt;/h2>
&lt;p>一般在 shell 中未加上 &lt;code>&amp;amp;&lt;/code> 的命令就會放在前景處理，且一次只會處理一個 process，使用 shell script 執行多個命令時，也是一次只產生一個 process：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">time&lt;/span> -p sh foreground.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>使用 time -p 執行命令，會將 time -p 後的命令作為其子程序執行，再由這個子程序作為父程序執行 shell script ，產生出新的程序(有點繞口 XD)，待所有子程序都執行完畢後，回傳從程序執行到結束所經過的時間。&lt;/p>
&lt;/blockquote>
&lt;p>第一個子程序等待 3 秒：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.29.37.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.29.37.png"
>&lt;/p>
&lt;p>開始第二個子程序等待 9 秒，回傳第一個子程序結束後執行的訊息：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.29.40.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.29.40.png"
>&lt;/p>
&lt;p>開始第三個子程序等待 6 秒，回傳第二個子程序結束後執行的訊息：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.29.48.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.29.48.png"
>&lt;/p>
&lt;p>所有程序結束，回傳訊息與執行時間，總共花費 3+6+9 = 18 秒：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.29.54.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.29.54.png"
>&lt;/p>
&lt;h2 id="背景執行">背景執行&lt;/h2>
&lt;p>現在將前景執行的命令放到背景執行，並回傳子程序 PID，使用 &lt;code>wait&lt;/code> 等待程序結束：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">time&lt;/span> -p sh background.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同時產生三個子程序，放在背景由 Linux 去做並發或平行處理，其中 &lt;code>CPU&lt;/code> 的欄位表示當下這個程序是由哪個 CPU 處理的：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.31.36.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.31.36.png"
>&lt;/p>
&lt;p>第一個子程序結束，此時其他子程序繼續倒數中：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.31.38.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.31.38.png"
>&lt;/p>
&lt;p>第三個子程序先結束了，因為已經倒數完畢：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.31.40.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.31.40.png"
>&lt;/p>
&lt;p>最後第二個子程序結束，總共花費 9 秒：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.31.44.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.31.44.png"
>&lt;/p>
&lt;p>這邊的例子及命令的量都舉得很少，建議可以自己試試用 &lt;code>for loop&lt;/code> 去產生大量的命令執行，不過還要考慮單核及多核的系統上處理的差異喔！ 可以參考 &lt;strong>&lt;a class="link" href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;ved=2ahUKEwjn2_mguuX6AhUU4GEKHbACBIIQFnoECBUQAQ&amp;amp;url=https%3A%2F%2Fhackmd.io%2F%40owlfox%2FSyaTF2VgL%2Fhttps%253A%252F%252Fhackmd.io%252Fs%252FSkh_AaVix&amp;amp;usg=AOvVaw2MPz6QOe7v0wzttr70OaRN" target="_blank" rel="noopener"
>Concurrency 程式設計 - HackMD&lt;/a> 。&lt;/strong>&lt;/p>
&lt;h2 id="殭屍程序">殭屍程序&lt;/h2>
&lt;h3 id="程序被正常回收">程序被正常回收&lt;/h3>
&lt;p>我們先來看看有正常使用 &lt;code>wait&lt;/code> 等待程序結束的狀況：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># use wait&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">time&lt;/span> -p sh zombie.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令執行中，echo 先將所有已產生程序的 PID 顯示出來，觀察以下結果 :&lt;/p>
&lt;ul>
&lt;li>每個程序的 PPID(父程序) 是誰，父 產生(→) 子&lt;/li>
&lt;li>container → &lt;code>shell(ash)&lt;/code>&lt;/li>
&lt;li>&lt;code>shell(ash)&lt;/code> → &lt;code>time -p sh zombie.sh&lt;/code>&lt;/li>
&lt;li>&lt;code>time -p sh zombie.sh&lt;/code> → &lt;code>sh zombie.sh&lt;/code>&lt;/li>
&lt;li>&lt;code>sh zombie.sh&lt;/code> → &lt;code>sleep&lt;/code>&lt;/li>
&lt;li>&lt;code>time -p sh zombie.sh&lt;/code> 程序在前景執行並等待中&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.34.06.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.34.06.png"
>&lt;/p>
&lt;p>命令結束，所有結束的子程序都被其父程序回收，程序執行時間共約 10 秒(並發執行)：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.34.17.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.34.17.png"
>&lt;/p>
&lt;h3 id="程序結束後未被父程序回收">程序結束後未被父程序回收&lt;/h3>
&lt;p>再來試試不使用 &lt;code>wait&lt;/code> 時，程序執行完的狀況：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># not use wait&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">time&lt;/span> -p sh zombie.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令執行後馬上結束，與前面的狀況有些不同：&lt;/p>
&lt;ul>
&lt;li>程序執行時間約 0.01 秒，這邊的執行時間只包含 &lt;code>time -p sh zombie.sh&lt;/code> 及 &lt;code>sh zombie.sh&lt;/code> 程序&lt;/li>
&lt;li>每個 &lt;code>sleep&lt;/code> 程序其 PPID 為 1，而這個 PID 為 1 的程序是 container 建立後產生的第一個程序，也就是最前面 docker run 時的 command 所產生的&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.34.36.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.34.36.png"
>&lt;/p>
&lt;p>程序結束後，其父行程沒有回收子程序，子程序變成 &lt;strong>殭屍程序&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://blog.zerolr.net/assets/images/e6-88-aa-e5-9c-96_2022-10-17_-e4-b8-8a-e5-8d-881.34.46.png"
loading="lazy"
alt="截圖 2022-10-17 上午1.34.46.png"
>&lt;/p>
&lt;hr>
&lt;p>那麼為什麼沒用 &lt;code>wait&lt;/code> 就會讓程序變成由 PID 1 的程序來產生呢？&lt;/p>
&lt;p>我們從 &lt;code>wait&lt;/code> 的 manual page 中可以得知 :&lt;/p>
&lt;blockquote>
&lt;p>If a &lt;strong>parent process terminates&lt;/strong>, then its &amp;ldquo;zombie&amp;rdquo; children (if any) are adopted by &lt;strong>init(1)&lt;/strong>, (or by the nearest &amp;ldquo;subreaper&amp;rdquo; process as defined through the use of the &lt;strong>prctl(2)&lt;/strong> PR_SET_CHILD_SUBREAPER operation);
&lt;strong>init(1) automatically performs a wait to remove the zombies.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>喔～由於未使用 &lt;code>wait&lt;/code> 去等待 &lt;code>zombie.sh&lt;/code> 產生的背景程序執行完畢，所以執行 &lt;code>zombie.sh&lt;/code> 的當下程序就結束了，產生出來的子程序找不到爹，最後就被隔壁老王 &lt;strong>init(1)&lt;/strong> 收養了(X，而這個程序在這個實驗中是由 docker run 的 command - ash 所產生的，最後可以透過以下命令去進入 container 中 PID 1 的程序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 退出目前的 shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 進入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo docker attach busybox
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後按個 enter，殭屍程序就會被回收了 。&lt;/p>
&lt;h3 id="結果比較">結果比較&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>有 wait&lt;/th>
&lt;th>沒 wait&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>由其父程序進行等待並回收&lt;/td>
&lt;td>由 PID 1 的程序 init(1) 接收子程序，並自動加入 wait 去結束殭屍程序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>老爹給你靠&lt;/td>
&lt;td>老爹跑路，隔壁老王好心收養&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="總結">總結&lt;/h2>
&lt;ul>
&lt;li>原本只是要紀錄怎麼樣同時下命令，結果想要弄個模擬實驗就會挖更多坑，不過也算比以前更深入一點點探討運作過程中的原理，速速妹！&lt;/li>
&lt;/ul>
&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://linux-kernel-labs.github.io/refs/heads/master/lectures/smp.html#linux-kernel-concurrency-sources" target="_blank" rel="noopener"
>Symmetric Multi-Processing - Linux kernel concurrency sources&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mirror/busybox/blob/master/procps/top.c" target="_blank" rel="noopener"
>busybox - procps/top.c&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://iter01.com/642002.html" target="_blank" rel="noopener"
>Linux 中 Sleep 和 Wait 命令的使用方式&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://linuxdiary.blogspot.com/2007/10/blog-post_30.html" target="_blank" rel="noopener"
>LINUX 學習日誌 - 把命令放到背景執行&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://unix.stackexchange.com/questions/352781/background-zombie-daemon-and-without-ctty-are-these-concepts-connected" target="_blank" rel="noopener"
>Background, zombie, daemon and without ctty - are these concepts connected?&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/3004811/how-do-you-run-multiple-programs-in-parallel-from-a-bash-script" target="_blank" rel="noopener"
>How do you run multiple programs in parallel from a bash script?&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://man7.org/linux/man-pages/man1/time.1.html#OPTIONS" target="_blank" rel="noopener"
>time(1) — Linux manual page&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://man7.org/linux/man-pages/man2/waitpid.2.html" target="_blank" rel="noopener"
>wait(2) — Linux manual page&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.docker.com/engine/reference/commandline/attach/" target="_blank" rel="noopener"
>docker attach&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://hackmd.io/@owlfox/SyaTF2VgL/https%3A%2F%2Fhackmd.io%2Fs%2FSkh_AaVix" target="_blank" rel="noopener"
>Concurrency 程式設計 - HackMD&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>